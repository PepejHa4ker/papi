package com.pepej.papi.ap;

import lombok.Cleanup;
import lombok.SneakyThrows;
import org.yaml.snakeyaml.Yaml;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import javax.tools.FileObject;
import javax.tools.StandardLocation;
import java.io.BufferedWriter;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Processes the {@link Plugin} annotation and generates a plugin.yml file.
 */
@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedAnnotationTypes({"com.pepej.papi.ap.Plugin", "com.pepej.papi.ap.PluginDependency"})
public class PluginProcessor extends AbstractProcessor {

    @Override
    @SneakyThrows
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment env) {
        Set<? extends Element> annotatedElements = env.getElementsAnnotatedWith(Plugin.class);
        if (annotatedElements.isEmpty()) {
            return false;
        }

        if (annotatedElements.size() > 1) {
            this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "More than one @Plugi n element found.");
            return false;
        }

        Element element = annotatedElements.iterator().next();

        if (!(element instanceof TypeElement)) {
            this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "@Plugin element is not instance of TypeElement");
            return false;
        }

        TypeElement type = ((TypeElement) element);
        Map<String, Object> data = new LinkedHashMap<>();
        Plugin plugin = type.getAnnotation(Plugin.class);

        data.put("name", plugin.name());

        String version = plugin.version();
        if (!version.isEmpty()) {
            data.put("version", version);
        } else {
            data.put("version", new SimpleDateFormat("yyyy-MM-dd-HH-mm").format(new Date(System.currentTimeMillis())));
        }

        data.put("main", type.getQualifiedName().toString());

        String description = plugin.description();
        if (!description.isEmpty()) {
            data.put("description", description);
        }

        String apiVersion = plugin.apiVersion();
        if (!apiVersion.isEmpty()) {
            data.put("api-version", apiVersion);
        }

        String[] authors = plugin.authors();
        if (authors.length == 1) {
            data.put("author", authors[0]);
        } else if (authors.length > 1) {
            data.put("authors", new ArrayList<>(Arrays.asList(authors)));
        }

        String website = plugin.website();
        if (!website.isEmpty()) {
            data.put("website", website);
        }

        PluginDependency[] depends = plugin.depends();
        List<String> hard = new ArrayList<>();
        List<String> soft = new ArrayList<>();

        for (PluginDependency depend : depends) {
            if (depend.soft()) {
                soft.add(depend.value());
            } else {
                hard.add(depend.value());
            }
        }

        hard.addAll(Arrays.asList(plugin.hardDepends()));
        soft.addAll(Arrays.asList(plugin.softDepends()));

        if (!hard.isEmpty()) {
            data.put("depend", hard);
        }

        if (!soft.isEmpty()) {
            data.put("softdepend", soft);
        }

        String[] loadBefore = plugin.loadBefore();
        if (loadBefore.length != 0) {
            data.put("loadbefore", new ArrayList<>(Arrays.asList(loadBefore)));
        }


        Yaml yaml = new Yaml();
        FileObject resource = this.processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT, "", "plugin.yml");
        @Cleanup BufferedWriter bw = new BufferedWriter(resource.openWriter());
        bw.write("#Autogenerated plugin.yml by Papi @Plugin\n");
        yaml.dump(data, bw);
        bw.flush();


        return true;

    }

}
